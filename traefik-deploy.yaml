apiVersion: v1
kind: Namespace
metadata:
  name: traefik
---
# Source: traefik/templates/rbac/serviceaccount.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: traefik

---
# Source: traefik/templates/crd/ingressroute.yaml
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: ingressroutes.traefik.containo.us
spec:
  group: traefik.containo.us
  version: v1alpha1
  names:
    kind: IngressRoute
    plural: ingressroutes
    singular: ingressroute
  scope: Namespaced

---
# Source: traefik/templates/crd/ingressroutetcp.yaml
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: ingressroutetcps.traefik.containo.us
spec:
  group: traefik.containo.us
  version: v1alpha1
  names:
    kind: IngressRouteTCP
    plural: ingressroutetcps
    singular: ingressroutetcp
  scope: Namespaced

---
# Source: traefik/templates/crd/middlewares.yaml
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: middlewares.traefik.containo.us
spec:
  group: traefik.containo.us
  version: v1alpha1
  names:
    kind: Middleware
    plural: middlewares
    singular: middleware
  scope: Namespaced

---
# Source: traefik/templates/crd/tlsoptions.yaml
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: tlsoptions.traefik.containo.us
spec:
  group: traefik.containo.us
  version: v1alpha1
  names:
    kind: TLSOption
    plural: tlsoptions
    singular: tlsoption
  scope: Namespaced

---
# Source: traefik/templates/crd/traefikservice.yaml
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: traefikservices.traefik.containo.us
spec:
  group: traefik.containo.us
  version: v1alpha1
  names:
    kind: TraefikService
    plural: traefikservices
    singular: traefikservice
  scope: Namespaced

---
# Source: traefik/templates/rbac/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: traefik
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - services
      - endpoints
      - secrets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - traefik.containo.us
    resources:
      - ingressroutes
      - ingressroutetcps
      - middlewares
      - tlsoptions
      - traefikservices
    verbs:
      - get
      - list
      - watch

---
# Source: traefik/templates/rbac/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: traefik
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: traefik
subjects:
  - kind: ServiceAccount
    name: traefik
    namespace: traefik

---
# Source: traefik/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: traefik
  labels:
    app: traefik
spec:
  type: NodePort
  selector:
    app: traefik
  ports:
    - port: 9000
      name: traefik
      targetPort: "traefik"
    - port: 80
      name: web
      targetPort: "web"
    - port: 443
      name: websecure
      targetPort: "websecure"

---
# Source: traefik/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: traefik
  labels:
    app: traefik
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      name: traefik
      labels:
        app: traefik
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9000"
    spec:
      serviceAccountName: traefik
      terminationGracePeriodSeconds: 60
      containers:
        - name: traefik
          image: traefik:2.1.1
          imagePullPolicy: IfNotPresent
          readinessProbe:
            httpGet:
              path: /ping
              port: 9000
            failureThreshold: 1
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          livenessProbe:
            httpGet:
              path: /ping
              port: 9000
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          ports:
            - name: "traefik"
              containerPort: 9000
              protocol: TCP
            - name: "web"
              protocol: TCP
              containerPort: 8000
            - name: "websecure"
              protocol: TCP
              containerPort: 8433
          volumeMounts:
            - mountPath: /etc/traefik/
              name: config
      volumes:
        - name: config
          configMap:
            name: traefik
      restartPolicy: Always
  selector:
    matchLabels:
      app: traefik
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: traefik
data:
  traefik.toml: |
    [global]
      checkNewVersion = true
    [ping]

    [api]
      insecure = true
      dashboard = true
      debug = true

    [log]
      level = "WARN"

    [accessLog]
      bufferingSize = 42


    [entryPoints]
      [entryPoints.web]
        address = ":8000"
      [entryPoints.traefik]
        address = ":9000"
      [entryPoints.https]
        address = ":8443"

    [providers.kubernetesCRD]
    [metrics]
      [metrics.prometheus]

---
# Source: traefik/templates/dashboard-hook-ingressroute.yaml
#
#apiVersion: traefik.containo.us/v1alpha1
#kind: IngressRoute
#metadata:
#  name: traefik-dashboard
#  annotations:
#    helm.sh/hook: "post-install"
#  labels:
#    app: traefik
#    chart: "traefik-3.1.0"
#    release: "traefik"
#    heritage: "Tiller"
#spec:
#  entryPoints:
#    - web
#  routes:
#  - match: PathPrefix(`/dashboard`) || PathPrefix(`/api`)
#    kind: Rule
#    services:
#    - name: api@internal
#      kind: TraefikService
